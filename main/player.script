
-- -----------------------------------------------------------------------------
-- For simple directional ops easier/better to have a lookup than use pyth func
local fire_lookup = {}
fire_lookup[0] 		= 1.5708

fire_lookup[10] 	= 6.28319
fire_lookup[1] 		= 1.5708
fire_lookup[-10] 	= 3.14159
fire_lookup[-1] 	= 4.71239

fire_lookup[9] 		= 5.49779
fire_lookup[11] 	= 0.785398
fire_lookup[-9] 	= 2.35619
fire_lookup[-11]	= 3.92699

-- -----------------------------------------------------------------------------

go.property("pcolor", vmath.vector4(1,1,1,1))

local DIST_CHANGED 		= 3
local MOVE_SMOOTH		= 4.0
-- -----------------------------------------------------------------------------

function init(self)
	msg.post(".", "acquire_input_focus")

	self.moving = false
	self.firing = false                     -- [1]

	self.input 	= vmath.vector3()
	self.dir 	= vmath.vector3(0, 1, 0)
	self.speed 	= 100
	self.strdir = 0
	self.lastdt = 0
	self.frame 	= 0

	self.posL 	= vmath.vector3()
	-- Used to collect update states for the object
	self.updater 	= {}
	self.pos_target = go.get_position()
end

-- -----------------------------------------------------------------------------

function final(self)                                -- [7]
	msg.post(".", "release_input_focus")            -- [8]
end

-- -----------------------------------------------------------------------------

local function do_update(self, dt)

	self.lastdt = dt

	if(self.other) then 		
		local thismove = table.remove(self.updater, 1)
		if(thismove) then 
			self.pos_target = thismove.pos
			local m = thismove.m
			if(m.f) then 
				self.firing = true 
				self.strdir = m.ix * 10 + m.iy
				self.dir = vmath.vector3(m.dx, m.dy, 0)
			end
		end
		local pos = go.get_position()
		go.set_position( vmath.lerp(MOVE_SMOOTH * dt, pos, self.pos_target) )
	else
		-- stopped moving.
		if(self.moving == false and self.moving_old) then 
			local pos = go.get_position()
			msg.post("gui-runtime", "move_player", { state = {
					x = pos.x,
					y = pos.y, 
					ix = 0,
					iy = 0,
					m = false,
					dx = self.dir.x, 
					dy = self.dir.y,
					s = self.speed,
					f = self.firing,
				}
			})
			self.moving_old = nil 
		end

		if self.moving then
			self.strdir = self.input.x * 10 +  self.input.y
			local pos = go.get_position()
			pos = pos + self.dir * self.speed * dt
			go.set_position(pos)
		end
	end 

		
	if self.firing then
		local angle = fire_lookup[self.strdir]
		local rot = vmath.quat_rotation_z(angle)            -- [2]
		local props = { dir = self.dir }                    -- [3]
		factory.create("#rocketfactory", nil, rot, props)   -- [4]
	end

	if(self.input.x ~= 0 or self.input.y ~= 0) then self.moving_old = true end 
	self.input.x = 0
	self.input.y = 0
	self.moving = false
	self.firing = false                     -- [2]		
end 

function update(self, dt)

	do_update(self, dt)
	self.frame 	= self.frame + 1
end

-- -----------------------------------------------------------------------------

local function do_input(self, action_id, action)

	if(self.other == nil) then 
		if action_id == hash("fire") and action.pressed then
			self.firing = true
		end

		if action_id == hash("up") then
			self.input.y = 1                            -- [15]
		elseif action_id == hash("down") then
			self.input.y = -1
		elseif action_id == hash("left") then
			self.input.x = -1
		elseif action_id == hash("right") then
			self.input.x = 1
		end 
	end 

	if vmath.length(self.input) > 0 then
		self.moving = true                          -- [16]
		self.dir = vmath.normalize(self.input)      -- [17]
	end
	
	if(self.other == nil) then 
		local pos = go.get_position()
		if((vmath.length(pos-self.posL) > DIST_CHANGED) or (self.firing)) then 
			
			msg.post("gui-runtime", "move_player", { state = {
					x = pos.x,
					y = pos.y, 
					ix = self.input.x,
					iy = self.input.y,
					m = self.moving,
					dx = self.dir.x, 
					dy = self.dir.y,
					s = self.speed,
					f = self.firing,
				}
			})
			self.posL = pos
		end
	end
end 

function on_input(self, action_id, action)          -- [14]

	do_input(self, action_id, action)
end

-- -----------------------------------------------------------------------------

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("building") then
			--print("collided", message, message_id)
			local pos = go.get_position()
			--pprint(self.dir, self.speed)
			pos = pos - (self.dir * self.speed * self.lastdt)
			go.set_position(pos)
		end
	end
	
	if message_id == hash("player_details") then 

		label.set_text("#playername", message.name)
		go.set("#playername", "color", message.color)
		-- go.set("#sprite", "tint", message.color)

		-- Start update timers for players
		if(message.other) then 
			self.other = true
		end
	end 

	if(self.other) then 
		if message_id == hash("player_move") then 
			local pos = go.get_position()
			self.pos = vmath.vector3(message.x, message.y, 1)
			if(vmath.length(pos - self.pos) > DIST_CHANGED) then 
				table.insert(self.updater, { pos = self.pos, m = message })
			end
		end 
	end
end
-- -----------------------------------------------------------------------------
